pipeline {
    agent any

    environment {
        REPO_URL = 'https://github.com/sebasarias17/To-Do-App-Fork.git'
        DOCKER_COMPOSE_PATH = './app/docker-compose.yml'
        IMAGE_NAME = 'sebasarias17/to-do-app' // Nombre completo de la imagen incluyendo el nombre de usuario de Docker Hub
        VERSION_FILE = 'version.txt' // Archivo donde almacenar la versión
    }

    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main', url: "${REPO_URL}"
            }
        }

        stage('Load Version') {
            steps {
                script {
                    if (fileExists(VERSION_FILE)) {
                        env.VERSION = readFile(VERSION_FILE).trim()
                    } else {
                        env.VERSION = "v1.0.0"
                    }
                    echo "Current Version: ${env.VERSION}"
                }
            }
        }

        stage('Generate New Version Tag') {
            steps {
                script {
                    def versionParts = env.VERSION.split('\\.')
                    def major = versionParts[0].replace('v', '').toInteger()
                    def minor = versionParts[1].toInteger()
                    def patch = versionParts[2].toInteger() + 1 // Incrementa el patch

                    env.NEW_VERSION = "v${major}.${minor}.${patch}"
                    writeFile(file: VERSION_FILE, text: env.NEW_VERSION)
                    echo "New Version: ${env.NEW_VERSION}"
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    // Construir la imagen Docker y etiquetarla con la nueva versión
                    sh "docker-compose -f ${DOCKER_COMPOSE_PATH} build"

                    // Etiquetar la imagen con el nuevo tag generado
                    sh "docker tag ${IMAGE_NAME}:latest ${IMAGE_NAME}:${NEW_VERSION}"
                }
            }
        }

        stage('Login to Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_HUB_USERNAME', passwordVariable: 'DOCKER_HUB_PASSWORD')]) {
                        sh "echo ${DOCKER_HUB_PASSWORD} | docker login -u ${DOCKER_HUB_USERNAME} --password-stdin"
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    // Pushear la imagen al registro Docker con el nuevo tag y 'latest'
                    sh "docker push ${IMAGE_NAME}:latest"
                    sh "docker push ${IMAGE_NAME}:${NEW_VERSION}"
                }
            }
        }
    }

    post {
        success {
            echo 'Build and Deployment successful!'
        }
        failure {
            echo 'Build or Deployment failed!'
        }
    }
}
