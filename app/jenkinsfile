pipeline {
    agent any

    environment {
        REPO_URL = 'https://github.com/sebasarias17/To-Do-App-Fork.git'
        DOCKER_COMPOSE_PATH = './app/docker-compose.yml'
        IMAGE_NAME = 'sebasarias17/to-do-app'
        VERSION_FILE = './app/version.txt' 
    }

    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main', url: "${REPO_URL}"
            }
        }

        stage('Generate Tag') {
            steps {
                script {
                    env.TAG = readFile("${VERSION_FILE}").trim()
                }
            }
        }

        stage('Prepare Environment') {
            steps {
                script {
                    sh 'mkdir -p ./tmp'
                    sh 'chmod -R 777 ./tmp/'
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                script {
                    dir('app'){
                        sh 'rm -f yarn.lock'
                        
                        sh 'npm install jest'
                        
                        sh 'npm install'
                    }
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    echo 'Running tests...'
                    dir('app'){
                        sh 'npm test'
                    }
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    sh "docker-compose -f ${DOCKER_COMPOSE_PATH} build --build-arg TAG=${TAG}"
                    sh "docker tag ${IMAGE_NAME}:latest ${IMAGE_NAME}:${TAG}"
                }
            }
        }

        stage('Login to Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_HUB_USERNAME', passwordVariable: 'DOCKER_HUB_PASSWORD')]) {
                        sh "echo ${DOCKER_HUB_PASSWORD} | docker login -u ${DOCKER_HUB_USERNAME} --password-stdin"
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    sh "docker push ${IMAGE_NAME}:latest"
                    sh "docker push ${IMAGE_NAME}:${TAG}"
                }
            }
        }
    }

    post {
        success {
            echo 'Build and Deployment successful!'
        }
        failure {
            echo 'Build or Deployment failed!'
        }
    }
}
